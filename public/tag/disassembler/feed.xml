<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Disassembler on RETRO.MOE</title>
    <link>http://localhost:1313/tag/disassembler/</link>
    <description>Recent content in Disassembler on RETRO.MOE</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Dec 2015 02:54:47 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tag/disassembler/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Disassembling 6502 code with Radare - Part II</title>
      <link>http://localhost:1313/2015/12/09/disassembling-6502-core-with-radare-part-ii/</link>
      <pubDate>Thu, 10 Dec 2015 02:54:47 +0000</pubDate>
      <guid>http://localhost:1313/2015/12/09/disassembling-6502-core-with-radare-part-ii/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s crack a simple game. If you are not familiar with Radare, read &lt;a href=&#34;http://retro.moe/2015/11/18/disassembling-6502-code-with-radare-part-i/&#34;&gt;Part I&lt;/a&gt; first.&lt;/p&gt;
&lt;h3 id=&#34;creating-and-opening-a-vice-snapshot-file&#34;&gt;Creating and opening a VICE Snapshot file&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s crack BC&amp;rsquo;s Quest For Tires since its copy-protection is easy to bypass.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unzip this file: &lt;a href=&#34;http://tapes.c64.no/tapes/BCsQuestForTires.zip&#34;&gt;http://tapes.c64.no/tapes/BCsQuestForTires.zip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the tap file with &lt;a href=&#34;http://vice-emu.sourceforge.net/&#34;&gt;VICE&lt;/a&gt; (the most popular Commodore 64 emulator), and..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;the game has some kind of copy-protection. If we enter invalid codes, we won&amp;rsquo;t be able to play the game.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since Radare supports VICE Snapshot File format, we can save an snapshot of the game, and analyze it with Radare.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In VICE, go to the menu, Snapshot -&amp;gt; Save Snapshot Image&amp;hellip;
&lt;ul&gt;
&lt;li&gt;If we select &amp;ldquo;Save ROMs&amp;rdquo;, then the BASIC ROM and the KERNAL ROM will be saved inside the Snapshot file, and will be included as Radare sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://retro.moe/wp-content/uploads/2015/12/save_snapshot_dialog.png&#34;&gt;&lt;img alt=&#34;save_snapshot_dialog&#34; loading=&#34;lazy&#34; src=&#34;https://retro.moe/wp-content/uploads/2015/12/save_snapshot_dialog.png?w=700&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Radare VICE Snapshot File (VSF) support lets us inspect:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 64k RAM of the computer at the moment the snapshot was saved&lt;/li&gt;
&lt;li&gt;The BASIC and KERNAL ROMs in case they were saved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To open a VSF file, just pass the VSF file as the first argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ r2 bc_copy_protection_screen.vsf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x00005689]&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;0x00005689&lt;/code&gt; is the PC (program counter) at the moment the snapshot was saved.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Disassembling 6502 code with Radare - Part I</title>
      <link>http://localhost:1313/2015/11/18/disassembling-6502-code-with-radare-part-i/</link>
      <pubDate>Thu, 19 Nov 2015 06:52:23 +0000</pubDate>
      <guid>http://localhost:1313/2015/11/18/disassembling-6502-code-with-radare-part-i/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://radare.org/&#34;&gt;Radare&lt;/a&gt; is an open source portable reversing framework that can do many things, among those things it can disassemble 6502 code.&lt;/p&gt;
&lt;h3 id=&#34;download-and-install-radare&#34;&gt;Download and install radare&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;First, download &lt;a href=&#34;https://github.com/radare/radare2&#34;&gt;radare from github&lt;/a&gt;. You need a recent version in order to disassemble 6502 code.&lt;/li&gt;
&lt;li&gt;And then install it by running &lt;em&gt;sys/install.sh&lt;/em&gt; (or &lt;em&gt;sys/user.sh&lt;/em&gt; for local installation):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/radare/radare2.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd radare2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./sys/install.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;loading-a-c64-prg&#34;&gt;Loading a c64 .prg&lt;/h3&gt;
&lt;p&gt;Radare has many command line options. But in order to load 6502 programs we need just two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;-a6502&lt;/em&gt; to specify the 6502 architecture.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-mMemoryAddress&lt;/em&gt; to map the file to a certain memory address. Use 2047 for &amp;ldquo;normal&amp;rdquo; programs. Usually they start at $0801 (2049), but we have to subtract 2 from the .prg header.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ r2 -a6502 -m2047 mygame.prg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;disassembling&#34;&gt;Disassembling&lt;/h3&gt;
&lt;p&gt;Radare doesn&amp;rsquo;t have a GUI, like IDA. Instead is has a powerful command line interface (think of GDB). Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ r2 -a6502 -m2047 musicplayer.prg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x000007ff]&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;em&gt;0x7ff&lt;/em&gt; (2047) is the seek address, meaning that all commands will use that address as the base address. Let&amp;rsquo;s print the first 32 bytes. ( &lt;em&gt;px&lt;/em&gt; = print hexa):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x000007ff]&amp;gt; px 32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;offset   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x07ff  0108 0b08 3905 9e32 3036 3100 0000 78ad  ....9..2061...x.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080f  0ddc a212 a000 b9d4 1a99 f020 c8d0 f7ce  ........... ....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;ldquo;2061&amp;rdquo; that we see, is part of the BASIC &amp;ldquo;SYS 2061&amp;rdquo; command that usually appears in all C64 programs. So, let&amp;rsquo;s disassemble the first 12 instructions from 2061. ( &lt;em&gt;pd&lt;/em&gt; = print disassemble):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x000007ff]&amp;gt; pd 12 @ 2061
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x0000080d    78             sei
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x0000080e    ad0ddc         lda 0xdc0d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x00000811    a212           ldx #0x12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x00000813    a000           ldy #0x00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ┌┌─&amp;gt; 0x00000815    b9d41a         lda 0x1ad4,y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ││   0x00000818    99f020         sta 0x20f0,y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ││   0x0000081b    c8             iny
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       └──&amp;lt; 0x0000081c    d0f7           bne 0xf7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        │   0x0000081e    ce1708         dec 0x0817
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        │   0x00000821    ce1a08         dec 0x081a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        │   0x00000824    ca             dex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        └─&amp;lt; 0x00000825    d0ee           bne 0xee
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case we don&amp;rsquo;t know the meaning of a certain opcode, we can print its description with &lt;em&gt;?d&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x00000815]&amp;gt; ?d sei
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set interrupt disable status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or if we want to print the description in every disassembled line, we can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e asm.describe=true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then disassemble again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000080e&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pd &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2061&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x080d&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;        sei           ; set interrupt disable status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x080e&lt;/span&gt;  ad0ddc    lda &lt;span style=&#34;color:#ae81ff&#34;&gt;0xdc0d&lt;/span&gt;    ; load accumulator with memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0811&lt;/span&gt;  a212      ldx &lt;span style=&#34;color:#75715e&#34;&gt;#0x12     ; load index x with memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0813&lt;/span&gt;  a000      ldy &lt;span style=&#34;color:#75715e&#34;&gt;#0x00     ; load index y with memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┌─&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0815&lt;/span&gt;  b9d41a    lda &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1ad4&lt;/span&gt;,y  ; load accumulator with memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0818&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;f020    sta &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20f0&lt;/span&gt;,y  ; store accumulator &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081b&lt;/span&gt;  c8        iny           ; increment index y by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└─&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081c&lt;/span&gt;  d0f7      bne &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf7&lt;/span&gt;      ; branch on result &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; zero
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081e&lt;/span&gt;  ce1708    dec &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0817&lt;/span&gt;    ; decrement memory by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0821&lt;/span&gt;  ce1a08    dec &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081a&lt;/span&gt;    ; decrement memory by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0824&lt;/span&gt;  ca        dex           ; decrement index x by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0825&lt;/span&gt;  d0ee      bne &lt;span style=&#34;color:#ae81ff&#34;&gt;0xee&lt;/span&gt;      ; branch on result &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; zero
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more disassembling options just type &lt;code&gt;p?&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>

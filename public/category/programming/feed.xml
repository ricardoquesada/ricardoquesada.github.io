<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming on RETRO.MOE</title>
    <link>http://localhost:1313/category/programming/</link>
    <description>Recent content in Programming on RETRO.MOE</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Jul 2022 19:34:39 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/category/programming/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Unijoysticle 2 A500</title>
      <link>http://localhost:1313/2022/07/11/introducing-unijoysticle-2-a500/</link>
      <pubDate>Mon, 11 Jul 2022 19:34:39 +0000</pubDate>
      <guid>http://localhost:1313/2022/07/11/introducing-unijoysticle-2-a500/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://youtu.be/cE4u50y5TOI&#34;&gt;https://youtu.be/cE4u50y5TOI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unijoysticle 2 A500 is a device that enables Bluetooth gamepads and mice on the Commodore Amiga.&lt;/p&gt;
&lt;p&gt;It is similar in functionality to the &lt;a href=&#34;https://retro.moe/2021/10/20/introducing-unijoysticle-2/&#34;&gt;Unijoysticle 2+&lt;/a&gt;, but with some additional features tailored for the Amiga, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fits in the Amiga 500 / 1200 joystick port without additional cables&lt;/li&gt;
&lt;li&gt;New buttons:
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;mode&amp;rdquo; button: To easily cycle between &amp;ldquo;normal&amp;rdquo;, &amp;ldquo;mouse&amp;rdquo; and &amp;ldquo;enhanced&amp;rdquo; modes&lt;/li&gt;
&lt;li&gt;&amp;ldquo;swap&amp;rdquo; button: To easily swap joystick ports. Useful in many scenarios, specially in the Amiga 4000 where the joystick ports are swapped.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additional LED for status: Tells whether Bluetooth pair is enabled, and in which gamepad mode is selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to that, the firmware (Bluepad32) was updated to support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mouse support: this was #1 feature request!
&lt;ul&gt;
&lt;li&gt;List of supported mice is here: &lt;a href=&#34;https://gitlab.com/ricardoquesada/bluepad32/-/blob/main/docs/supported_mice.md&#34;&gt;supported mice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Supports up to two mice connected at the same time. Finally you can play &lt;a href=&#34;https://lemmings.fandom.com/wiki/Lemmings_two-player&#34;&gt;Lemmings in two-player mode&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Console support: useful to change settings in runtime like:
&lt;ul&gt;
&lt;li&gt;change mouse resolution&lt;/li&gt;
&lt;li&gt;change autofire clicks-per-second&lt;/li&gt;
&lt;li&gt;debug commands&lt;/li&gt;
&lt;li&gt;and other &lt;a href=&#34;https://github.com/ricardoquesada/unijoysticle2/blob/main/docs/user_guide.md#console&#34;&gt;useful settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Improved re-connection on PlayStation and Switch gamepads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See all the new Bluepad32 v3.5 features here: &lt;a href=&#34;https://retro.moe/2022/07/10/bluepad32-v3-5-released/&#34;&gt;Bluepad32 v3.5 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And last, but not least, the User Guide has been updated with new content, photos and videos to make it easier to read for the user:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/ricardoquesada/unijoysticle2/-/blob/main/docs/user_guide.md&#34;&gt;Unijoysticle User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Introducing Unijoysticle 2&#43;</title>
      <link>http://localhost:1313/2021/10/20/introducing-unijoysticle-2/</link>
      <pubDate>Wed, 20 Oct 2021 17:10:17 +0000</pubDate>
      <guid>http://localhost:1313/2021/10/20/introducing-unijoysticle-2/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://lh3.googleusercontent.com/pw/AM-JKLUXjtgKSpJq7tH98-28yuaWiBRLN9y0tF5wdYgk4cfPPnoVxpX2astdSZLqT5JVz2Sddw7OIjZ4xDtDL2yf04rxHvgVgu_m74OlERyXDkTKn1VnrxQWaQpGT-xA0ydgKCcCqVGhh9a_0VpfasM_PGLnOg=-no?authuser=0&#34;&gt;Unijoysticle 2+&lt;/p&gt;
&lt;p&gt;For those not familiar with Unijoysticle 2, it is a device that allows you to use modern Bluetooth gamepads like &lt;a href=&#34;https://www.playstation.com/en-us/accessories/dualsense-wireless-controller/&#34;&gt;Sony DualSense&lt;/a&gt; or &lt;a href=&#34;https://store.nintendo.com/nintendo-switch/joy-con-controllers.html&#34;&gt;Nintendo Switch controllers&lt;/a&gt; (to name just a few) on old computers like the Commodore 64 or Amiga.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s new in version 2+:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Case friendly: lower profile, LEDs &amp;amp; buttons are close the border and has mounting holes.&lt;/li&gt;
&lt;li&gt;Looks nicer: Uses SMD components for almost everything&lt;/li&gt;
&lt;li&gt;Supports buttons 2 &amp;amp; 3 in port #2. Some Amiga games might use them.&lt;/li&gt;
&lt;li&gt;Cheaper to manufacture. I reduced the price from $60 to $35&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>A multi-platform 256-byte intro</title>
      <link>http://localhost:1313/2021/09/05/a-multi-platform-256-byte-intro/</link>
      <pubDate>Sun, 05 Sep 2021 21:35:04 +0000</pubDate>
      <guid>http://localhost:1313/2021/09/05/a-multi-platform-256-byte-intro/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nCzAlfXOOXo&#34;&gt;https://www.youtube.com/watch?v=nCzAlfXOOXo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Amor para Dos&amp;rdquo; is a multi-platform 256-byte intro. The binary, without any kind of modification, can run both on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 80386 (or better) + DOS&lt;/li&gt;
&lt;li&gt;and on a Commodore 64.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We ( &lt;a href=&#34;http://lia.rebelion.digital/&#34;&gt;L.I.A&lt;/a&gt;) released it atÂ &lt;a href=&#34;https://file+.vscode-resource.vscode-webview.net/home/riq/progs/lia/flash-2021/flash2021&#34;&gt;Flashparty 2021&lt;/a&gt;. I did the coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Bluepad32 support for Arduino and CircuitPython</title>
      <link>http://localhost:1313/2021/07/25/bluepad32-support-for-arduino-and-circuitpython/</link>
      <pubDate>Mon, 26 Jul 2021 04:47:39 +0000</pubDate>
      <guid>http://localhost:1313/2021/07/25/bluepad32-support-for-arduino-and-circuitpython/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://retro.moe/wp-content/uploads/2021/07/bluepad32-arduino-circuitpython.png&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://retro.moe/wp-content/uploads/2021/07/bluepad32-arduino-circuitpython.png?w=800&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is now possible to use Bluetooth gamepads both in Arduino and CircuitPython projects.&lt;/p&gt;
&lt;p&gt;This means that you can use your PlayStation (PS3, PS4, PS5), Nintendo (Wii, Wii U, Switch) and Xbox One S gamepads in your electronics project: control a robot, home-automation, video games, etc&amp;hellip; everything controlled from your favorite gamepad.&lt;/p&gt;
&lt;p&gt;The catch is that not every Arduino or CircuitPython boards are supported. In fact, only a few of them are supported.&lt;/p&gt;
&lt;p&gt;For Arduino, the boards that have the &lt;a href=&#34;https://www.u-blox.com/en/product/nina-w10-series-open-cpu&#34;&gt;NINA-W10x&lt;/a&gt; (ESP32) co-processor are supported, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://store.arduino.cc/usa/nano-rp2040-connect-with-headers&#34;&gt;Arduino Nano RP2040 Connect&lt;/a&gt; (great board, get one if you haven&amp;rsquo;t already)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.arduino.cc/usa/nano-33-iot&#34;&gt;Arduino Nano 33 IoT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.arduino.cc/usa/mkr-wifi-1010&#34;&gt;Arduino MKR WiFi 1010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.arduino.cc/usa/mkr-vidor-4000&#34;&gt;Arduino MKR VIDOR 4000 WiFi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.arduino.cc/usa/arduino-uno-wifi-rev2&#34;&gt;Arduino Uno WiFi Rev 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and probably a few more. If it has the NINA-W10x co-processor, it is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And similar for CircuitPython, the boards that have the AirLift (ESP32) co-processor are supported, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adafruit.com/product/4745&#34;&gt;Adafruit MatrixPortal M4&lt;/a&gt; (great to create &lt;a href=&#34;https://retro.moe/2020/12/13/designing-a-modern-retro-console-for-my-kids-adding-chiptune-music/&#34;&gt;a video-game console&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adafruit.com/product/4000&#34;&gt;Adafruit Metro M4 Express AirLift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adafruit.com/product/4116&#34;&gt;Adafruit PyPortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adafruit.com/product/4200&#34;&gt;Adafruit PyBadge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the additional benefit that you can use any CircuitPython board by attaching the stand-alone AirLift module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adafruit.com/product/4201&#34;&gt;AirLift module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Bluepad32: Gamepad support for ESP32</title>
      <link>http://localhost:1313/2020/11/24/bluepad32-gamepad-support-for-esp32/</link>
      <pubDate>Tue, 24 Nov 2020 15:23:42 +0000</pubDate>
      <guid>http://localhost:1313/2020/11/24/bluepad32-gamepad-support-for-esp32/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://retro.moe/wp-content/uploads/2020/11/bluepad32-logo.png&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://retro.moe/wp-content/uploads/2020/11/bluepad32-logo.png?w=842&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m happy to announce the release of Bluepad32: gamepad support for the ESP32.&lt;/p&gt;
&lt;p&gt;Bluepad32 is a firmware that runs in the ESP32 microcontroller. It supports all the modern Bluetooth gamepads like Sony (PS5, PS4, PS3), Microsoft (Xbox One S) and Nintendo (Switch, Wii) gamepads.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=V0AGUe-CrEY&#34;&gt;https://www.youtube.com/watch?v=V0AGUe-CrEY&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;who-is-this-for&#34;&gt;Who is this for?&lt;/h3&gt;
&lt;p&gt;This is for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;hellip;tinkers / makers / electronic hobbyist&lt;/li&gt;
&lt;li&gt;&amp;hellip;that want to add gamepad support into their projects&lt;/li&gt;
&lt;li&gt;&amp;hellip;in a maintainable and easy way&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For further info, read: &lt;a href=&#34;https://gitlab.com/ricardoquesada/bluepad32/-/blob/master/docs/adding_new_platform.md&#34;&gt;Adding new platforms.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;real-world-examples&#34;&gt;Real world examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://retro.moe/unijoysticle2/&#34;&gt;Unijoysticle 2&lt;/a&gt;: Gamepad support for the Commodore 64 / Amiga / etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dbEbiJZd4n8&#34;&gt;MatrixPortal M4&lt;/a&gt;: Gamepad support for the &lt;a href=&#34;https://www.adafruit.com/product/4745&#34;&gt;Adafruit AirLift&lt;/a&gt; family of boards&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crowdsupply.com/radiona/ulx3s&#34;&gt;ULX3S&lt;/a&gt;: An FPGA-based computer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just add an ESP32 to your project, and control it with a gamepad!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Unijoysticle 2: modern bluetooth gamepads for retro computers</title>
      <link>http://localhost:1313/2019/04/15/unijoysticle-2-modern-bluetooth-gamepads-for-retro-computers/</link>
      <pubDate>Tue, 16 Apr 2019 05:23:01 +0000</pubDate>
      <guid>http://localhost:1313/2019/04/15/unijoysticle-2-modern-bluetooth-gamepads-for-retro-computers/</guid>
      <description>&lt;p&gt;Announcing Unijoysticle 2:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/2uakPuSOjZU&#34;&gt;https://youtu.be/2uakPuSOjZU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use modern Bluetooth controllers (gamepads, mice, smart TV remote controllers) in retro computers like the Commodore 64/128, Atari ST, Amiga and more.&lt;/p&gt;
&lt;p&gt;For further info go here: &lt;a href=&#34;http://localhost:1313/unijoysticle2&#34;&gt;/unijoysticle2&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>64K RAM Ought to be Enough: a demo for the PCjr</title>
      <link>http://localhost:1313/2018/09/26/64k-ram-ought-to-be-enough-a-demo-for-the-pcjr/</link>
      <pubDate>Thu, 27 Sep 2018 06:25:17 +0000</pubDate>
      <guid>http://localhost:1313/2018/09/26/64k-ram-ought-to-be-enough-a-demo-for-the-pcjr/</guid>
      <description>&lt;p&gt;&lt;em&gt;Updated 2018â10â08&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uakDpJns9LA&#34;&gt;https://www.youtube.com/watch?v=uakDpJns9LA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A demo for the IBM PCjr by &lt;a href=&#34;http://pungas.space&#34;&gt;Pungas de Villa Martelli&lt;/a&gt;. It was presented at &lt;a href=&#34;http://flashparty.dx.am/&#34;&gt;Flashparty 2018&lt;/a&gt; and &lt;a href=&#34;http://flashparty.dx.am/index.php?option=com_content&amp;amp;view=article&amp;amp;id=37:results-fp-2018&amp;amp;catid=2&amp;amp;lang=en&amp;amp;Itemid=134&#34;&gt;won the Demo&lt;/a&gt; category.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;An IBM PCjr with at least 64k RAM.&lt;/p&gt;
&lt;h2 id=&#34;download&#34;&gt;Download&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Source code:Â &lt;a href=&#34;https://gitlab.com/ricardoquesada/pcjr-flashparty-2018&#34;&gt;https://gitlab.com/ricardoquesada/pcjr-flashpartyâ2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Binary: &lt;a href=&#34;http://pungas.space/pvm-64ko.zip&#34;&gt;pvm-64ko.zip&lt;/a&gt; (does not run on emulators)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;technical-description&#34;&gt;Technical description&lt;/h1&gt;
&lt;p&gt;The demo is divided in the boot loader and demo 3 parts&lt;/p&gt;
&lt;h2 id=&#34;boot-loader&#34;&gt;Boot loader&lt;/h2&gt;
&lt;p&gt;[caption id=&amp;quot;&amp;quot; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;512&amp;rdquo;]&lt;img alt=&#34;Boot loader&#34; loading=&#34;lazy&#34; src=&#34;https://lh3.googleusercontent.com/CAMqnjSjk-8f_gX2LvfrUq4QMQm8wgKtd-1Vhcmza4OcEiNYvKb7LJWMKNjcpUcaTUWXRfl8e6oz3bJcRXHTBdIjzTrELpX9eBGzYVSC9Rj4PsjbJqKBh0TfAoRnT-8JBFnNprd7xUs=-no&#34;&gt; Boot loader[/caption]
The demo is intended to work with a 64K RAM (or more) PCjr. Booting from its own boot loader is needed to save precious memory. DOS alone takes ~20K of RAM. That is 30% of the total memory. You donât want to waste that memory.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Performance of the 8088 on PC, PCjr and Tandy 1000</title>
      <link>http://localhost:1313/2018/03/04/performance-of-the-8088-on-pc-pcjr-and-tandy-1000/</link>
      <pubDate>Mon, 05 Mar 2018 05:34:26 +0000</pubDate>
      <guid>http://localhost:1313/2018/03/04/performance-of-the-8088-on-pc-pcjr-and-tandy-1000/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://lh3.googleusercontent.com/Qm6Ynexbr8lJUggbCcZoKQaPX-qKyrA5Ef4_Feu7mju1M6vVhiN86NjNpmXBZlO_AdAu0KWVWACqK_oWMEPGkgeSSwOBsSV804i3WS0dFML6LqpMY7o3dwlV6oBs0dSJfjM1D5vnjYQ=-no&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s well-known that you should &lt;a href=&#34;https://github.com/jagregory/abrash-zen-of-asm/blob/master/src/chapter-04.md&#34;&gt;measure the performance of your code&lt;/a&gt;, and not rely only on the opcode&amp;rsquo;s &amp;ldquo;cycle counts&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;But how fast is an IBM PC 5150 compared to a PCjr ? or to a Tandy 1000? or how fast is the Tandy 1000 HX in fast mode (7.16Mhz) compared to the slow mode (4.77Mhz) ? Or how fast is a &lt;code&gt;nop&lt;/code&gt; compared to a &lt;code&gt;cwd&lt;/code&gt; ?&lt;/p&gt;
&lt;p&gt;I created a test ( &lt;a href=&#34;https://github.com/ricardoquesada/pc-8088-misc/blob/master/opcodes_perf/perf.asm&#34;&gt;perf.asm&lt;/a&gt;) that measures the performance of different opcodes and run it on different Intel 8088 machines. I run the test multiple times just to make sure the results were stable enough. All interrupts were disabled, except the Timer (of course). And on the PCjr the NMI is disabled as well.&lt;/p&gt;
&lt;p&gt;Without further ado, here are the results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1geGxh76SVFHNi3xR6HEKpHHVckLLz9DsK3JNdPi6pBA/edit?usp=sharing&#34;&gt;Intel 8088 opcodes performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>IBM PCjr: Zero-day Data-destroy vulnerability</title>
      <link>http://localhost:1313/2018/01/15/ibm-pcjr-zero-day-data-destroy-vulnerability/</link>
      <pubDate>Mon, 15 Jan 2018 19:44:37 +0000</pubDate>
      <guid>http://localhost:1313/2018/01/15/ibm-pcjr-zero-day-data-destroy-vulnerability/</guid>
      <description>&lt;p&gt;IBM PCjr zero-day data-destroy vulnerability (AKA: Joykill).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This vulnerability allows local and remote attackers to destroy the contents of the floppy diskette. User interaction is required to exploit this vulnerability. The issue results from the lack of proper validation when starting the manufacturing system test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exploit (local):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/Zbv9DJ&#34;&gt;https://youtu.be/Zbv9DJ&lt;/a&gt;_nXo0&lt;/p&gt;
</description>
    </item>
    <item>
      <title>IBM PCjr BIOS dump</title>
      <link>http://localhost:1313/2018/01/03/ibm-pcjr-bios-dump/</link>
      <pubDate>Wed, 03 Jan 2018 15:29:57 +0000</pubDate>
      <guid>http://localhost:1313/2018/01/03/ibm-pcjr-bios-dump/</guid>
      <description>&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://lh3.googleusercontent.com/QwPdCQFbS4grTTTnEg0aZ1cxE2p2RzSpIH14RtQnXLq9mvLWZoXWBrOtN%5FWNUs10ocaQ-gvGGSAkjTsx78%5FRBw0NoiBoYXTEu6hV8MJ68vxkkysJznNz7yVmCDFmdc5h3xHmy23HnPM=-no&#34; width=&#34;512&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The IBM PCjr BIOS is very well documented in the &lt;a href=&#34;https://archive.org/details/IbmPcjrTechnicalReference&#34;&gt;IBM PCjr Technical Reference manual&lt;/a&gt;Â (a must read for every PCjr developer).&lt;/p&gt;
&lt;p&gt;The only problem is that navigating that code is not easy. It has all the problems from scanned books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the fonts don&amp;rsquo;t look good&lt;/li&gt;
&lt;li&gt;no hyper-links&lt;/li&gt;
&lt;li&gt;and difficult to search&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I dumped the BIOS and started analyzing it with &lt;a href=&#34;https://www.hex-rays.com/products/ida/support/download_freeware.shtml&#34;&gt;IDA Pro - Free version&lt;/a&gt;. I added some of the original comments from the Technical Reference manual, and added some comments of my own.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tandy 64 Jr. - an intro for the IBM PCjr</title>
      <link>http://localhost:1313/2018/01/02/tandy-64-jr-an-intro-for-the-ibm-pcjr/</link>
      <pubDate>Wed, 03 Jan 2018 02:19:51 +0000</pubDate>
      <guid>http://localhost:1313/2018/01/02/tandy-64-jr-an-intro-for-the-ibm-pcjr/</guid>
      <description>&lt;p&gt;Happy new year!&lt;/p&gt;
&lt;p&gt;We ( &lt;a href=&#34;http://pungas.space&#34;&gt;PVM&lt;/a&gt;) ported our Tandy 64 intro (originally designed for the Tandy 1000HX) to the IBM PCjr.&lt;/p&gt;

    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/phtEFwJu0AM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;Requirements: IBM PCjr. with 256k RAM&lt;/p&gt;
&lt;p&gt;Download:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary: &lt;a href=&#34;https://github.com/c64scene-ar/tandy64/raw/ibm_pcjr/tandy64jr.zip&#34;&gt;tandy64jr.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source code: &lt;a href=&#34;https://github.com/c64scene-ar/tandy64/tree/ibm_pcjr&#34;&gt;https://github.com/c64scene-ar/tandy64/tree/ibm_pcjr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Worth mentioning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Runs flicker-free&lt;/li&gt;
&lt;li&gt;Stable raster-bar, without garbage (world-first?)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Tandy 64, and intro for the Tandy 1000 and more</title>
      <link>http://localhost:1313/2017/12/03/tandy-64-and-intro-for-the-tandy-1000-and-more/</link>
      <pubDate>Sun, 03 Dec 2017 16:39:48 +0000</pubDate>
      <guid>http://localhost:1313/2017/12/03/tandy-64-and-intro-for-the-tandy-1000-and-more/</guid>
      <description>&lt;p&gt;With &lt;a href=&#34;http://pungas.space&#34;&gt;PVM&lt;/a&gt; with released an intro for the Tandy 1000 HX.&lt;/p&gt;
&lt;p&gt;The Tandy 1000 HX uses the Intel 8088-2 CPU. Which is a suuuuper slow CPU (slower than the 8086). With all its wait states and its limitations on the video card (no hardware sprites, no charset redefinition) it makes it comparable with a Commodore 64. In fact, for certain things a Commodore 64 if way faster.&lt;/p&gt;
&lt;p&gt;Without further ado, this is the Tandy intro:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Commodore 64 Assembly Tutorial - Part II</title>
      <link>http://localhost:1313/2017/08/10/commodore-64-assembly-tutorial-part-ii/</link>
      <pubDate>Thu, 10 Aug 2017 15:48:10 +0000</pubDate>
      <guid>http://localhost:1313/2017/08/10/commodore-64-assembly-tutorial-part-ii/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://lh3.googleusercontent.com/HtBOx9EhEiCzMQIG_bsl8CjLTXdukLYsXXFSM-QumrBZo0I-4jIT5I9Lu6HwZw_OtnteiEIVDieexuryqRqtEeXzoJUwD-l2KK_e1UOUfdXR1AoNIMWd-01w_G4JXxrr_ky9SfyAib4=-no&#34;&gt;&lt;/p&gt;
&lt;p&gt;A few months ago we ( &lt;a href=&#34;http://pungas.space/&#34;&gt;Pungas de Villa Martelli&lt;/a&gt;) released the &lt;a href=&#34;http://csdb.dk/release/?id=156895&#34;&gt;4Kindness,&lt;/a&gt;Â a 4K intro for &lt;a href=&#34;http://csdb.dk/event/?id=2527&#34;&gt;Silesia Party 8&lt;/a&gt;. And recently we released its source and a tutorial detailing how we built it.&lt;/p&gt;
&lt;p&gt;Without further ado, here it is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c64scene-ar/4kindness/blob/master/4kindness_internals.en.rst&#34;&gt;C64 Assembly Tutorial - Part II (english)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c64scene-ar/4kindness/blob/master/4kindness_internals.es.rst&#34;&gt;C64 cursito de asembler - Parte II (castellano)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c64scene-ar/4kindness/&#34;&gt;Full source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c64scene-ar/4kindness/raw/master/bin/4kindness.d64&#34;&gt;Binaries: 4kindness.d64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have doubts/questions about it, &lt;a href=&#34;http://pungas.space/&#34;&gt;let us know&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Commodore 64 Assembly Tutorial</title>
      <link>http://localhost:1313/2017/03/16/commodore-64-assembly-tutorial/</link>
      <pubDate>Thu, 16 Mar 2017 23:10:14 +0000</pubDate>
      <guid>http://localhost:1313/2017/03/16/commodore-64-assembly-tutorial/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://camo.githubusercontent.com/d8e565244aa48cc9a5bd0649d339f4baa250b99d/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f736b5a55527a5053764357463237526b44565551723955747875416370324738797876315453357151673543703172745f544658794d504378416f766571525367696b4f3667374f365a61744a4a6d5f53336d2d5533753564344f2d6765345857536e6e44516d51484342755f6237596a4b59344c445f495f776f43717253704f7365584e4c55&#34;&gt;&lt;/p&gt;
&lt;p&gt;A few months ago we released the &lt;a href=&#34;http://csdb.dk/release/?id=153497&#34;&gt;Argentine Songbook Vol. 1&lt;/a&gt; chipdisk. And recently we released its source code including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Full source code (the assembly files + makefiles + everything&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Full audio sources (the SidWizard files)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we also wrote a tutorial about how write a chipdisk, including all the tricks that we used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c64scene-ar/chipdisk-nac-vol.1/blob/master/chipdisk_internals.en.rst&#34;&gt;C64 Assembly Tutorial (english)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c64scene-ar/chipdisk-nac-vol.1/blob/master/chipdisk_internals.es.rst&#34;&gt;C64 Assembly Tutorial (spanish)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c64scene-ar/chipdisk-nac-vol.1&#34;&gt;Full source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have doubts/questions about it, &lt;a href=&#34;http://pungas.space/&#34;&gt;let us know&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    <item>
      <title>VChar64 v0.1.0 released</title>
      <link>http://localhost:1313/2016/07/15/vchar64-v0-1-0-released/</link>
      <pubDate>Fri, 15 Jul 2016 13:16:41 +0000</pubDate>
      <guid>http://localhost:1313/2016/07/15/vchar64-v0-1-0-released/</guid>
      <description>&lt;p&gt;This is mostly a bug-fix release, focused on improving the workflow.&lt;/p&gt;
&lt;p&gt;Download:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.1.0/vchar64-0.1.0.mac.dmg&#34;&gt;vchar64-0.1.0.mac.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Win32:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.1.0/vchar64-0.1.0.win32.zip&#34;&gt;vchar64-0.1.0.win32.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source code:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64&#34;&gt;https://github.com/ricardoquesada/vchar64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>UniJoystiCle v0.2 coming soon</title>
      <link>http://localhost:1313/2016/04/22/unijoysticle-v0-2-coming-soon/</link>
      <pubDate>Sat, 23 Apr 2016 01:37:29 +0000</pubDate>
      <guid>http://localhost:1313/2016/04/22/unijoysticle-v0-2-coming-soon/</guid>
      <description>&lt;p&gt;UniJoystiCle v0.2 coming soon.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4d8Ow-SmCmM&#34;&gt;https://www.youtube.com/watch?v=4d8Ow-SmCmM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Changes in v0.2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[NEW] - ESP8266 device: supports 2 joysticks (uses three 4066 ICs instead of two&lt;/li&gt;
&lt;li&gt;[NEW] - ESP8266 firmware uses AP mode by default.Â Uses SSID &amp;ldquo;unijosyticle&amp;rdquo; + last 2 bytes of mac address&lt;/li&gt;
&lt;li&gt;[NEW] - iOS Client: Can be configured to use either joystick port&lt;/li&gt;
&lt;li&gt;[NEW] - iOS Client: Auto-discover ESP8266 firmware using mDNS&lt;/li&gt;
&lt;li&gt;[NEW] - iOS Client: UniJoystiCle mode also supports up, down and fire (jump)&lt;/li&gt;
&lt;li&gt;[FIX] - Name: Renamed project from Uni-Joysti-Cle to UniJoystiCle (easier to search, shorter to type)&lt;/li&gt;
&lt;li&gt;[FIX] - ESP8266 device: replaced NodeMCU LoLin with NodeMCU Amica&lt;/li&gt;
&lt;li&gt;[FIX] - Sophisticated Glue Material: Uses gaffer tape, instead of duct tape&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>VChar64 v0.0.13 released</title>
      <link>http://localhost:1313/2016/04/15/vchar64-v0-0-13-released/</link>
      <pubDate>Fri, 15 Apr 2016 21:35:58 +0000</pubDate>
      <guid>http://localhost:1313/2016/04/15/vchar64-v0-0-13-released/</guid>
      <description>&lt;p&gt;Download:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.0.13/vchar64-0.0.13.mac.dmg&#34;&gt;vchar64-0.0.13.mac.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Win32:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.0.13/vchar64-0.0.13.win32.zip&#34;&gt;vchar64-0.0.13.win32.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source code:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64&#34;&gt;https://github.com/ricardoquesada/vchar64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lb7UNIhoyoI&#34;&gt;https://www.youtube.com/watch?v=lb7UNIhoyoI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Changelog:&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Announcing the Uni-Joysti-Cleâ¢</title>
      <link>http://localhost:1313/2016/04/06/announcing-the-uni-joysti-cle/</link>
      <pubDate>Wed, 06 Apr 2016 16:02:10 +0000</pubDate>
      <guid>http://localhost:1313/2016/04/06/announcing-the-uni-joysti-cle/</guid>
      <description>&lt;p&gt;The Uni-Joysti-Cleâ¢: The first and only solution to playÂ Commodore 64 video games with your unicycle. Unique immersive experience, much better than VR.&lt;/p&gt;

    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/q43euD1pTp0?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;It consists of fiveÂ beautifully designed parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Uni Games&lt;/em&gt;Â video game for the Commodore 64&lt;/li&gt;
&lt;li&gt;The Uni-Joysti-Cleâ¢ WiFi receiver, andÂ itsÂ firmware&lt;/li&gt;
&lt;li&gt;The Uni-Joysti-Cleâ¢ smartphone application&lt;/li&gt;
&lt;li&gt;A unicycle&lt;/li&gt;
&lt;li&gt;Sophisticated glueÂ material&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find all the information about this revolutionary device here:Â &lt;a href=&#34;http://localhost:1313/unijoysticle/&#34;&gt;/unijoysticle/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>C64 Remote Controller: Prototype v0.1 works!...</title>
      <link>http://localhost:1313/2016/04/01/c64-remote-controller-prototype-v0-1-works/</link>
      <pubDate>Fri, 01 Apr 2016 08:38:41 +0000</pubDate>
      <guid>http://localhost:1313/2016/04/01/c64-remote-controller-prototype-v0-1-works/</guid>
      <description>&lt;p&gt;&amp;hellip;or How to use a 64-bit machine to control a Commodore 64.&lt;/p&gt;

    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/L?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;No schematics or PCBs yet. But at least I have theÂ materials that I&amp;rsquo;m using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One &lt;a href=&#34;http://www.ebay.com/sch/i.html?_from=R40&amp;amp;_trksid=p2050601.m570.l1313.TR0.TRC0.H0.Xlolin+nodemcu.TRS0&amp;amp;_nkw=lolin+nodemcu&amp;amp;_sacat=0&#34;&gt;Lolin NodeMCU&lt;/a&gt; (should work with any other ESP8266 that have at least five GPIOs)&lt;/li&gt;
&lt;li&gt;Two 4066 ICs. I&amp;rsquo;m using &lt;a href=&#34;http://www.ti.com/lit/ds/symlink/sn74hc4066.pdf&#34;&gt;this one&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;and this is the software that I&amp;rsquo;m using both for the NodeMCU firmware and the iOS client:&lt;/p&gt;</description>
    </item>
    <item>
      <title>C64 Remote Controller: NodeMCU vs. Adafruit Huzzah vs. SparkFun Thing vs...</title>
      <link>http://localhost:1313/2016/03/27/c64-remote-controller-nodemcu-vs-adafruit-huzzah-vs-sparkfun-thing-vs/</link>
      <pubDate>Sun, 27 Mar 2016 21:21:04 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/27/c64-remote-controller-nodemcu-vs-adafruit-huzzah-vs-sparkfun-thing-vs/</guid>
      <description>&lt;h3 id=&#34;requirements-for-thec64-controller&#34;&gt;Requirements for theÂ c64 controller&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A micro-controller. I doesn&amp;rsquo;t need to be very powerful, just powerful enough to handle some UDP connections and configuring some GPIOs.&lt;/li&gt;
&lt;li&gt;Flash-able firmware: If possible withÂ support for &lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Arduino IDE&lt;/a&gt; (or similar). C++ preferred. &lt;a href=&#34;http://micropython.org/&#34;&gt;Micropython&lt;/a&gt; could be a nice backup plan.&lt;/li&gt;
&lt;li&gt;WiFi&lt;/li&gt;
&lt;li&gt;Some GPIOs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;which-moduleto-choose&#34;&gt;Which moduleÂ to choose&lt;/h3&gt;
&lt;p&gt;There many alternatives, and these are the ones that I evaluated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.arduino.cc/en/Main/ArduinoBoardUno&#34;&gt;Arduino&lt;/a&gt; + &lt;a href=&#34;http://www.arduino.cc/en/Main/ArduinoWiFiShield101&#34;&gt;WiFi shield&lt;/a&gt;Â or &lt;a href=&#34;http://espressif.com/en/products/hardware/esp8266ex/overview&#34;&gt;ESP8266&lt;/a&gt;: This is the first option that I evaluated thanks to &lt;a href=&#34;http://www.lemon64.com/forum/viewtopic.php?t=60046&#34;&gt;different&lt;/a&gt; &lt;a href=&#34;http://retroinvaders.com/commodoremania/foro/index.php/topic,1525.0.html&#34;&gt;suggestions&lt;/a&gt;. ButÂ since the ESP8266 already comes with a flash-able firmware, there was no need to use the Arduino part. I discarded this option, but I likedÂ the ESP8266 part.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/2471&#34;&gt;Adafruit Huzzah&lt;/a&gt;Â breakout ($9.95) / &lt;a href=&#34;https://www.adafruit.com/products/2821&#34;&gt;Adafruit Feather Huzzah&lt;/a&gt;Â ($15.95): An ESP8266 based module. I like Adafruit products since they are very well tested, they give you support, have very good documentation. ButÂ they are usually on the pricy side. All ESP8266 boards are supported by theÂ &lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;Arduino IDE&lt;/a&gt; which is a very good thing. Â (I ordered one Feather Huzzah).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sparkfun.com/products/13231&#34;&gt;SparkFun ESP8266 Thing&lt;/a&gt; ($15.95): Similar to the Feather Huzzah.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.aliexpress.com/af/nodemcu.html&#34;&gt;NodeMCU&lt;/a&gt; (~$4.00): Very similar too Adafruit Huzzah and SparkFun ESP8266 Thing. I&amp;rsquo;m not sure who built theÂ first module (Adafruit, SparkFun or NodeMCU), although I wouldn&amp;rsquo;t be surprised if NodeMCU was the first one. There is a lot of innovation in China in this area. NodeMCU comes with a firmware that supports Lua, which is nice for faster development. You should know thatÂ the Lua firmware could be installed in the other modules as well, and you can run C++ firmwares on NodeMCU as well. There are three different NodeMCU brands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amica: Which seems to be the official one, although I didn&amp;rsquo;t know this when I decided to buy the LoLin.&lt;/li&gt;
&lt;li&gt;LoLin: It seems that it is no longer produced by WeMos. (I ordered one of this too).&lt;/li&gt;
&lt;li&gt;DOIT: I know nothing about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.wemos.cc/Products/d1_mini.html&#34;&gt;Mini D1&lt;/a&gt; (~$4.00): Another ESP8266-based module similar to the previous ones. It is produced by &lt;a href=&#34;http://www.wemos.cc/&#34;&gt;WeMos&lt;/a&gt;, the same as the NodeMCU LoLin. My theory is that WeMos realized that there was more money in trying to create &lt;a href=&#34;http://www.wemos.cc/Products/mini_shields.html&#34;&gt;their own ecosystem&lt;/a&gt; rather than just cloning NodeMCU. It has 11 GPIOs, instead of the 9 offered by Adafruit Huzzah, which is good (I ordered a few of this one too).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There were other alternatives, &lt;a href=&#34;https://www.sparkfun.com/products/13774&#34;&gt;like the SparkFun Particle Photon&lt;/a&gt;Â ($19.00), based on non-ESP8266 micro-controllers. They were a bit more powerful, but also more expensive. And don&amp;rsquo;t support the Arduino IDE. So, for the moment I discarded them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>The Uni Games - Part II. Reboot</title>
      <link>http://localhost:1313/2016/03/27/the-uni-games-part-ii-reboot/</link>
      <pubDate>Sun, 27 Mar 2016 15:46:20 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/27/the-uni-games-part-ii-reboot/</guid>
      <description>&lt;p&gt;A reboot was needed. I rewrote most of the code. The game is no longer called &amp;ldquo;The Muni Race&amp;rdquo;. Instead it is called &amp;ldquo;The Uni Games&amp;rdquo; since it will have more than one event (think of &amp;ldquo;Summer Games&amp;rdquo; but for unicycles. &lt;a href=&#34;http://eng.unicon18.com/&#34;&gt;UNICON&lt;/a&gt; basically).&lt;/p&gt;
&lt;p&gt;The game will haveÂ a more-retro look and feel than before. It will only use PETSCII chars, plus sprites. No redefined characters, no bitmaps. Pure PETSCII. Pure retro effects.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://lh3.googleusercontent.com/-u6cUHJ6Fg9A/VvfhKfa9ctI/AAAAAAABdm4/t8b5283PpzUtEmfZuy0xCN6-2W2pflOSwCCo/s640-Ic42/Screen%2BShot%2B2016-03-27%2Bat%2B6.31.23%2BAM.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>VChar64 v0.0.12 released</title>
      <link>http://localhost:1313/2016/03/01/vchar64-v0-0-12-released/</link>
      <pubDate>Wed, 02 Mar 2016 07:16:41 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/01/vchar64-v0-0-12-released/</guid>
      <description>&lt;p&gt;New version, new features.&lt;/p&gt;
&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mac:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.0.12/vchar64-0.0.12.dmg.zip&#34;&gt;vchar64-0.0.12.dmg.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Win32:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.0.12/vchar64-0.0.12.win32.zip&#34;&gt;vchar64-0.0.12.win32.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;changes&#34;&gt;Changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[NEW] Koala Import: supports importing subregions. Useful when 256 chars areÂ not enough to import the whole bitmap&lt;/li&gt;
&lt;li&gt;[NEW] Added unknown font. Ripped from &lt;a href=&#34;http://csdb.dk/release/?id=144857&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[NEW] VICE snapshot import: Default charset address is the one that was usedÂ at the moment the snapshot was taken&lt;/li&gt;
&lt;li&gt;[NEW] Save/Export: Plays one beep on success, two beeps on error&lt;/li&gt;
&lt;li&gt;[NEW] Main Window: Status Bar shows the coordinates of the different widgets&lt;/li&gt;
&lt;li&gt;[BUGFIX] Export: shows correct extension when browsing file&lt;/li&gt;
&lt;li&gt;[BUGFIX] VICE/Koala Import: sets the name of the imported file in the tab&lt;/li&gt;
&lt;li&gt;[BUGFIX] Koala Import: detects duplicates chars, making the conversionÂ smaller&lt;/li&gt;
&lt;/ul&gt;

    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/2avAMmbQqRA?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;</description>
    </item>
    <item>
      <title>VChar64 v0.0.11 released</title>
      <link>http://localhost:1313/2016/02/01/vchar64-v0-0-11-released/</link>
      <pubDate>Mon, 01 Feb 2016 08:40:35 +0000</pubDate>
      <guid>http://localhost:1313/2016/02/01/vchar64-v0-0-11-released/</guid>
      <description>&lt;p&gt;VChar64 v0.0.11 was released.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Win32:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.0.11/vchar64-0.0.11.win32.zip&#34;&gt;vchar64-0.0.11.win32.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mac:Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/releases/download/0.0.11/vchar64-0.0.11.dmg.zip&#34;&gt;vchar64-0.0.11.dmg.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source code: Â &lt;a href=&#34;https://github.com/ricardoquesada/vchar64&#34;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/wp-content/uploads/2016/02/screen-shot-2016-02-01-at-12-36-42-am.png&#34;&gt;&lt;img alt=&#34;Importing Koala files&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/wp-content/uploads/2016/02/screen-shot-2016-02-01-at-12-36-42-am.png?w=700&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It includes several bug fixes and some important new features like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Koala import support&lt;/li&gt;
&lt;li&gt;Map support&lt;/li&gt;
&lt;li&gt;Export to Assembly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Full &lt;a href=&#34;https://github.com/ricardoquesada/vchar64/blob/0.0.11/CHANGELOG&#34;&gt;Changelog here&lt;/a&gt;.&lt;/p&gt;

    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/wIBTINBCngs?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;</description>
    </item>
    <item>
      <title>Disassembling 6502 code with Radare - Part II</title>
      <link>http://localhost:1313/2015/12/09/disassembling-6502-core-with-radare-part-ii/</link>
      <pubDate>Thu, 10 Dec 2015 02:54:47 +0000</pubDate>
      <guid>http://localhost:1313/2015/12/09/disassembling-6502-core-with-radare-part-ii/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s crack a simple game.Â If you are not familiar with Radare, read &lt;a href=&#34;http://retro.moe/2015/11/18/disassembling-6502-code-with-radare-part-i/&#34;&gt;Part I&lt;/a&gt; first.&lt;/p&gt;
&lt;h3 id=&#34;creating-and-opening-a-vice-snapshot-file&#34;&gt;Creating and opening a VICE Snapshot file&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s crack BC&amp;rsquo;s Quest For Tires since its copy-protection is easy to bypass.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unzip this file:Â &lt;a href=&#34;http://tapes.c64.no/tapes/BCsQuestForTires.zip&#34;&gt;http://tapes.c64.no/tapes/BCsQuestForTires.zip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the tap file with &lt;a href=&#34;http://vice-emu.sourceforge.net/&#34;&gt;VICE&lt;/a&gt;Â (the most popular Commodore 64 emulator), and..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;the game has some kind of copy-protection. If we enter invalid codes, we won&amp;rsquo;t be able to play the game.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since Radare supports VICE Snapshot File format, we can save an snapshot of the game, and analyzeÂ it with Radare.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In VICE, go to the menu, Snapshot -&amp;gt; Save Snapshot Image&amp;hellip;
&lt;ul&gt;
&lt;li&gt;If weÂ select &amp;ldquo;Save ROMs&amp;rdquo;, then the BASIC ROM and the KERNAL ROM will be saved inside the Snapshot file, and will be included as Radare sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://retro.moe/wp-content/uploads/2015/12/save_snapshot_dialog.png&#34;&gt;&lt;img alt=&#34;save_snapshot_dialog&#34; loading=&#34;lazy&#34; src=&#34;https://retro.moe/wp-content/uploads/2015/12/save_snapshot_dialog.png?w=700&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Radare VICE Snapshot File (VSF) support lets us inspect:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 64k RAM of the computer at the moment the snapshot was saved&lt;/li&gt;
&lt;li&gt;The BASIC and KERNAL ROMs in case they were saved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To open a VSF file, justÂ pass the VSF file as the first argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ r2 bc_copy_protection_screen.vsf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x00005689]&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;0x00005689&lt;/code&gt; is the PC (program counter) at the momentÂ the snapshot was saved.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Disassembling 6502 code with Radare - Part I</title>
      <link>http://localhost:1313/2015/11/18/disassembling-6502-code-with-radare-part-i/</link>
      <pubDate>Thu, 19 Nov 2015 06:52:23 +0000</pubDate>
      <guid>http://localhost:1313/2015/11/18/disassembling-6502-code-with-radare-part-i/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://radare.org/&#34;&gt;Radare&lt;/a&gt; is an open source portable reversing framework that can do many things, among those things it can disassemble 6502 code.&lt;/p&gt;
&lt;h3 id=&#34;download-and-install-radare&#34;&gt;Download and install radare&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;First, download &lt;a href=&#34;https://github.com/radare/radare2&#34;&gt;radare from github&lt;/a&gt;. You need a recent version in order to disassemble 6502 code.&lt;/li&gt;
&lt;li&gt;And then install it by running &lt;em&gt;sys/install.sh&lt;/em&gt; (or &lt;em&gt;sys/user.sh&lt;/em&gt; for local installation):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git cloneÂ https://github.com/radare/radare2.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd radare2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./sys/install.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;loading-a-c64-prg&#34;&gt;Loading a c64 .prg&lt;/h3&gt;
&lt;p&gt;Radare has many command line options. But in order to load 6502 programs we need just two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;-a6502&lt;/em&gt; to specify the 6502 architecture.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-mMemoryAddress&lt;/em&gt; to map the file to a certain memory address. Use 2047 for &amp;ldquo;normal&amp;rdquo; programs. Usually they start at $0801 (2049), but we have to subtract 2 from the .prg header.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ r2 -a6502 -m2047 mygame.prg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;disassembling&#34;&gt;Disassembling&lt;/h3&gt;
&lt;p&gt;Radare doesn&amp;rsquo;t have a GUI, like IDA. Instead is has a powerful command line interface (think of GDB). Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ r2 -a6502 -m2047 musicplayer.prg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x000007ff]&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;em&gt;0x7ff&lt;/em&gt;Â (2047) is the seek address, meaning that all commands will use that address as the base address. Let&amp;rsquo;s printÂ the first 32 bytes. ( &lt;em&gt;px&lt;/em&gt; = print hexa):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x000007ff]&amp;gt; px 32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;offset   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x07ff  0108 0b08 3905 9e32 3036 3100 0000 78ad  ....9..2061...x.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080f  0ddc a212 a000 b9d4 1a99 f020 c8d0 f7ce  ........... ....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;ldquo;2061&amp;rdquo; that we see, is part of the BASIC &amp;ldquo;SYS 2061&amp;rdquo; command that usually appears in all C64 programs. So, let&amp;rsquo;s disassemble the first 12 instructions from 2061. ( &lt;em&gt;pd&lt;/em&gt; = print disassemble):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x000007ff]&amp;gt; pd 12 @ 2061
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x0000080d    78             sei
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x0000080e    ad0ddc         lda 0xdc0d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x00000811    a212           ldx #0x12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            0x00000813    a000           ldy #0x00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       âââ&amp;gt; 0x00000815    b9d41a         lda 0x1ad4,y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ââ   0x00000818    99f020         sta 0x20f0,y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ââ   0x0000081b    c8             iny
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       âââ&amp;lt; 0x0000081c    d0f7           bne 0xf7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        â   0x0000081e    ce1708         dec 0x0817
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        â   0x00000821    ce1a08         dec 0x081a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        â   0x00000824    ca             dex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ââ&amp;lt; 0x00000825    d0ee           bne 0xee
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case we don&amp;rsquo;t know the meaning of a certain opcode, we can print its description with &lt;em&gt;?d&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[0x00000815]&amp;gt; ?d sei
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set interrupt disable status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or if weÂ want to print the description in every disassembled line, weÂ can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e asm.describe=true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then disassemble again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000080e&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pd &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2061&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x080d&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;        sei           ; set interrupt disable status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x080e&lt;/span&gt;  ad0ddc    lda &lt;span style=&#34;color:#ae81ff&#34;&gt;0xdc0d&lt;/span&gt;    ; load accumulator with memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0811&lt;/span&gt;  a212      ldx &lt;span style=&#34;color:#75715e&#34;&gt;#0x12     ; load index x with memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0813&lt;/span&gt;  a000      ldy &lt;span style=&#34;color:#75715e&#34;&gt;#0x00     ; load index y with memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ââ&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0815&lt;/span&gt;  b9d41a    lda &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1ad4&lt;/span&gt;,y  ; load accumulator with memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0818&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;f020    sta &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20f0&lt;/span&gt;,y  ; store accumulator &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081b&lt;/span&gt;  c8        iny           ; increment index y by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ââ&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081c&lt;/span&gt;  d0f7      bne &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf7&lt;/span&gt;      ; branch on result &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; zero
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081e&lt;/span&gt;  ce1708    dec &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0817&lt;/span&gt;    ; decrement memory by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0821&lt;/span&gt;  ce1a08    dec &lt;span style=&#34;color:#ae81ff&#34;&gt;0x081a&lt;/span&gt;    ; decrement memory by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0824&lt;/span&gt;  ca        dex           ; decrement index x by one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0825&lt;/span&gt;  d0ee      bne &lt;span style=&#34;color:#ae81ff&#34;&gt;0xee&lt;/span&gt;      ; branch on result &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; zero
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more disassembling options just type &lt;code&gt;p?&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Impressions of Google I/O 2015</title>
      <link>http://localhost:1313/2015/05/29/impressions-of-google-io-2015/</link>
      <pubDate>Sat, 30 May 2015 04:42:44 +0000</pubDate>
      <guid>http://localhost:1313/2015/05/29/impressions-of-google-io-2015/</guid>
      <description>&lt;p&gt;What was interesting about the Keynote:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/brillo/&#34;&gt;Brillo&lt;/a&gt;: the OS for the IoT&amp;hellip; but but but, there were no talks about it, almost no information about it, nothing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arstechnica.com/gadgets/2015/05/good-news-for-game-devs-android-studio-1-3-supports-androids-cc-ndk/&#34;&gt;Android Studio with C++ support&lt;/a&gt;: Finally :) The NDK really needs love, and having an IDE that supports it is great. Hey, even Microsoft is supporting the NDK now in &lt;a href=&#34;http://blogs.msdn.com/b/vcblog/archive/2015/04/29/what-s-new-with-c-cross-platform-development-with-vs-2015-rc.aspx&#34;&gt;VS2015&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://photos.google.com/&#34;&gt;Photos&lt;/a&gt; is decoupled from Google+ with free unlimited storage: This is great. I&amp;rsquo;ve been using Picasa since day one and I never used Google+ to store my photos. So basically Photos is the same as Picasa, but with unlimited storage.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.theverge.com/2015/5/28/8680345/google-maps-io-2015-offline-search-navigation&#34;&gt;Offline maps&lt;/a&gt;: Yeah&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/multidevice/android/customtabs&#34;&gt;Chrome Custom Tabs&lt;/a&gt;: Interesting alternative to present 3rd party views with the benefits of both the web and native worlds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What was not-that-interesting about the Keynote:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The rest.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;rsquo;t care if Android has better permissions or not (yeah, the old permissions-model sucked, but I don&amp;rsquo;t find that news interesting). The Family section for Google Play is good, but not interesting. Android Pay, meh. etc.&lt;/p&gt;
&lt;p&gt;One thing that I liked, but was not announced on the Keynote, was &lt;a href=&#34;https://www.google.com/atap/project-jacquard/&#34;&gt;Project Jacquard&lt;/a&gt;. They are using conductive threads and other stuff to create &amp;ldquo;smart&amp;rdquo; cloths. Something that &lt;a href=&#34;https://www.adafruit.com/&#34;&gt;Adafruit&lt;/a&gt; and &lt;a href=&#34;https://www.sparkfun.com/&#34;&gt;Sparkfun&lt;/a&gt; have been doing for a while, BTW.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Soldering, what could go wrong?</title>
      <link>http://localhost:1313/2015/04/11/soldering-what-could-go-wrong/</link>
      <pubDate>Sun, 12 Apr 2015 05:03:26 +0000</pubDate>
      <guid>http://localhost:1313/2015/04/11/soldering-what-could-go-wrong/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m good at software engineering, but in electronics, I&amp;rsquo;m a newbie. Nonetheless, I find electronics fascinating.&lt;/p&gt;
&lt;p&gt;Last year I did the first basic tutorials with Arduino, then I played a little bit with Raspberry Pi and CI20 (technically not really electronics). And this year, I built a very simple circuit to connect the RGBI output of my Commodore 128 to VGA&amp;hellip; I have been using breadboard, so no soldering, no PCB, or anything like that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merging my unicycling and development blogs</title>
      <link>http://localhost:1313/2015/04/09/merging-my-unicycling-and-development-blogs/</link>
      <pubDate>Fri, 10 Apr 2015 01:10:56 +0000</pubDate>
      <guid>http://localhost:1313/2015/04/09/merging-my-unicycling-and-development-blogs/</guid>
      <description>&lt;p&gt;Who has time to maintain two personal blogs ? It is even difficult to maintain just one. So what I did was to merge my unicycle ( &lt;a href=&#34;http://www.moniclco.com.ar&#34;&gt;monociclo.com.ar&lt;/a&gt;) blog into this one ( &lt;a href=&#34;http://towp8.com&#34;&gt;towp8.com&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I divided them in categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The unicycle blog is using the &amp;quot; &lt;a href=&#34;http://towp8.com/category/unicycle/&#34;&gt;unicycle&lt;/a&gt;&amp;quot; category.&lt;/li&gt;
&lt;li&gt;This blog is using the &amp;quot; &lt;a href=&#34;http://towp8.com/category/programming/&#34;&gt;programming&lt;/a&gt;&amp;quot; category&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Switching from iOS to Android: My experience</title>
      <link>http://localhost:1313/2014/12/24/switching-from-ios-to-android-my-experience/</link>
      <pubDate>Thu, 25 Dec 2014 01:37:57 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/24/switching-from-ios-to-android-my-experience/</guid>
      <description>&lt;p&gt;For the past 5 or 6 years, I used iPhones as my default phones. But a few months ago I decided to switch to Android.&lt;/p&gt;
&lt;p&gt;I tried Android devices before, but never as my &lt;em&gt;default&lt;/em&gt; phone.Â At the beginning I started using a &lt;a href=&#34;http://www.gsmarena.com/samsung_i9500_galaxy_s4-5125.php&#34;&gt;Samsung Galaxy S4&lt;/a&gt; (a 2013 5&amp;quot; device), but later I switch to a &lt;a href=&#34;http://www.gsmarena.com/xiaomi_mi_4-6518.php&#34;&gt;Xiaomi MI4&lt;/a&gt; (a 2014 5&amp;quot; device with better specs).&lt;/p&gt;
&lt;p&gt;Without further ado, this is my feedback:&lt;/p&gt;
&lt;h3 id=&#34;launcher&#34;&gt;&lt;strong&gt;Launcher&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;Xiaomi MIUI 6&#34; loading=&#34;lazy&#34; src=&#34;https://retro.moe/wp-content/uploads/2014/12/xiaomis-miui-6.png?w=169&#34;&gt;&lt;img alt=&#34;Samsung S4 TouchWiz&#34; loading=&#34;lazy&#34; src=&#34;https://retro.moe/wp-content/uploads/2014/12/samsungs4.png?w=169&#34;&gt;&lt;/p&gt;
&lt;p&gt;In case you don&amp;rsquo;t know what the launcher is, think of the shell that allows you to launch the applications. It is the first thing that appears when you turn on the phone. In a way, it defines the UX.&lt;/p&gt;
&lt;p&gt;Each phone maker customize the Android launcher according to itsÂ needs. And you can also download 3rd party &lt;a href=&#34;http://www.techradar.com/us/news/software/operating-systems/10-best-android-launchers-amazing-ways-to-supercharge-your-phone-1231553&#34;&gt;launchers&lt;/a&gt;. This is both a good thing and a bad thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The bad thing&lt;/strong&gt; is that every phone maker haveÂ a different launcher, making it difficult to switch to other Android devices, since the UX is different. Google has its own launcher called &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.launcher&amp;amp;hl=en&#34;&gt;Google Now Launcher&lt;/a&gt;, and tries hard to make sure that Android makers don&amp;rsquo;t differ too much from it, although that is not always true. Samsung, as an example, ships its phones with a launcher called &lt;a href=&#34;http://en.wikipedia.org/wiki/TouchWiz&#34;&gt;TouchWiz&lt;/a&gt;.Â It doesn&amp;rsquo;t differ thatÂ much from Google Now Launcher, but its changes make it a worse phone, not a better one.Â Xiaomi, on the other hand, ships its phones with a completely different launcher which makes your Android device behave &lt;a href=&#34;http://www.businessinsider.com/xiaomi-miui-6-looks-like-apple-ios-7-2014-8&#34;&gt;like an iOS device&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The good thing&lt;/strong&gt; is that you can useÂ a different launcher if you don&amp;rsquo;t like the default one (or create your own). This as a good thing because everything that can be configured, changed or replaced is an opportunity for innovation (see below).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Integrating LiquidFun with Cocos2d-x: Part II</title>
      <link>http://localhost:1313/2014/07/30/integrating-liquidfun-with-cocos2d-x-part-ii/</link>
      <pubDate>Wed, 30 Jul 2014 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/07/30/integrating-liquidfun-with-cocos2d-x-part-ii/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;//towp8.com/2014/04/23/integrating-liquidfun-with-cocos2d-x-part-i/&#34;&gt;Part I&lt;/a&gt; I described to how integrated LiquidFun with Cocos2d-x.
In this part (part II) I&amp;rsquo;ll describe how to render the particles using a basic water effect.&lt;/p&gt;
&lt;p&gt;Part I uses just one &lt;code&gt;glDrawArrays(GL_POINTS, 0, total);&lt;/code&gt; to draw the particles. And although that works to draw &amp;ldquo;particles&amp;rdquo;, it is not enough to draw &amp;ldquo;water&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Drawing &amp;ldquo;water&amp;rdquo; requires a more complex rendering algorithm, like the one used in this &lt;a href=&#34;http://www.patrickmatte.com/stuff/physicsLiquid/&#34;&gt;example&lt;/a&gt;. And implementing an algorithm similar that one is what this article describes.&lt;/p&gt;
&lt;p&gt;The algorithm works more or less like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose a white circle and blur it.
&lt;ul&gt;
&lt;li&gt;You can blur the circle at runtime&lt;/li&gt;
&lt;li&gt;Or you can blur it off-line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create an a new frame-buffer (think of a clean off-screen buffer where you can render whatever you want)&lt;/li&gt;
&lt;li&gt;Render the particles into the newly created frame-buffer using the blurred circle&lt;/li&gt;
&lt;li&gt;Now render the frame-buffer into the main color-buffer using a threshold. The threshold could be something like this:
&lt;ul&gt;
&lt;li&gt;If pixel.r &amp;lt; 0.1, discard the pixel (the pixel won&amp;rsquo;t be drawn)&lt;/li&gt;
&lt;li&gt;If pixel.r &amp;lt; 0.2, draw a blue pixel (for the border, although this is optional)&lt;/li&gt;
&lt;li&gt;else draw a white pixel (the inner part of the water)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-do-it-using-cocos2d-x-and-liquidfun&#34;&gt;How to do it using Cocos2d-x and LiquidFun&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s take the &lt;a href=&#34;https://github.com/cocos2d/cocos2d-x-samples/blob/v3.1/samples/LiquidFun-EyeCandy/Classes/LFParticleSystemNode.cpp&#34;&gt;&lt;code&gt;LFParticleSystemNode&lt;/code&gt;&lt;/a&gt; from Part I, and &amp;ldquo;evolve&amp;rdquo; it:&lt;/p&gt;
&lt;p&gt;The first thing to do is to add the &amp;ldquo;off-screen&amp;rdquo; frame-buffer into the &lt;code&gt;LFParticleSystemNode&lt;/code&gt; class. In Cocos2d-x, the &amp;ldquo;off-screen&amp;rdquo; buffers are created with the &lt;code&gt;RenderTexture&lt;/code&gt; class. Example:&lt;/p&gt;
&lt;p&gt;[code language=&amp;ldquo;cpp&amp;rdquo;]
bool LFParticleSystemNode::init(b2ParticleSystem* particleSystem, float ratio)
{
&amp;hellip;
// create an off-screen frame-buffer with the size of the screen
auto s = Director::getInstance()-&amp;gt;getWinSize();
_renderTexture = cocos2d::RenderTexture::create(s.width, s.height, Texture2D::PixelFormat::RGBA8888);
this-&amp;gt;addChild(_renderTexture);
_renderTexture-&amp;gt;setAnchorPoint(Point::ANCHOR_MIDDLE);
_renderTexture-&amp;gt;setPosition(Point(s.width/2, s.height/2));&lt;/p&gt;
&lt;p&gt;// Change the default shader. Use a the threshold shader
auto program = GLProgram::createWithByteArrays(_renderTextureShaderVert, _renderTextureShaderFrag);
auto programState = GLProgramState::getOrCreateWithGLProgram(program);
programState-&amp;gt;setUniformFloat(&amp;ldquo;u_threshold_discard&amp;rdquo;, 0.15);
programState-&amp;gt;setUniformFloat(&amp;ldquo;u_threshold_border&amp;rdquo;, 0.3);&lt;/p&gt;
&lt;p&gt;&amp;hellip;
}
[/code]&lt;/p&gt;
&lt;p&gt;And, as mentioned earlier, the &lt;code&gt;RenderTexture&lt;/code&gt; (the off-screen frame-buffer) needs a shader with a threshold. The threshold shader should look like the following:&lt;/p&gt;
&lt;p&gt;[code language=&amp;ldquo;cpp&amp;rdquo;]
varying vec4 v_fragmentColor;
varying vec2 v_texCoord;
uniform float u_threshold_discard;
uniform float u_threshold_border;&lt;/p&gt;
&lt;p&gt;void main()
{
vec4 color = v_fragmentColor * texture2D(CC_Texture0, v_texCoord);
if( color.r &amp;lt; u_threshold_discard)
// black or discard
color = vec4(0,0,0,0);
else if( color.r &amp;lt; u_threshold_border)
// blue for the border
color = vec4(0.2,0.2,0.9,1);
else
// white for the center
color = vec4(1,1,1,1);
gl_FragColor = color;
}
[/code]&lt;/p&gt;
&lt;p&gt;The values &lt;code&gt;u_threshold_discard&lt;/code&gt;, and &lt;code&gt;u_threshold_border&lt;/code&gt; are defined at runtime. In the example, they are set at 0.15 and 0.3 respectively.&lt;/p&gt;
&lt;p&gt;The next thing to do is, to render the particles in the &lt;code&gt;RenderTexture&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;[code language=&amp;ldquo;cpp&amp;rdquo;]void LFParticleSystemNode::draw(Renderer *renderer, const Mat4 &amp;amp;transform, uint32_t transformFlags)
{
// tell RenderTexture to &amp;ldquo;capture&amp;rdquo; the particles
Â Â Â  _renderTexture-&amp;gt;beginWithClear(0,0,0,0);&lt;/p&gt;
&lt;p&gt;Â Â Â  _customCommand.init(_globalZOrder);
Â Â Â  _customCommand.func = CC_CALLBACK_0(LFParticleSystemNode::onDraw, this, transform, transformFlags);
Â Â Â  renderer-&amp;gt;addCommand(&amp;amp;_customCommand);&lt;/p&gt;
&lt;p&gt;// tell RenderTexture to stop &amp;ldquo;capturing&amp;rdquo; the particles
Â Â Â  _renderTexture-&amp;gt;end();
}
[/code]&lt;/p&gt;
&lt;h3 id=&#34;the-result-is-the-following&#34;&gt;The result is the following&lt;/h3&gt;
</description>
    </item>
    <item>
      <title>WWDC 2014 announcements as a game developer</title>
      <link>http://localhost:1313/2014/06/03/wwdc-2014-announcements-and-the-game-developers/</link>
      <pubDate>Tue, 03 Jun 2014 17:59:57 +0000</pubDate>
      <guid>http://localhost:1313/2014/06/03/wwdc-2014-announcements-and-the-game-developers/</guid>
      <description>&lt;p&gt;At WWDC 2014, Apple announced new features for iOS and OS X. These are my thoughts:&lt;/p&gt;
&lt;h2 id=&#34;swift&#34;&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://retro.moe/wp-content/uploads/2014/06/swift.jpg&#34;&gt;&lt;img alt=&#34;Image&#34; loading=&#34;lazy&#34; src=&#34;http://retro.moe/wp-content/uploads/2014/06/swift.jpg?w=610&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;Swift&lt;/a&gt; is a new programming language by Apple.&lt;/p&gt;
&lt;p&gt;At first sight, it seems to be easier to learn and easier to master than Objective-C. Objective-C is not particular difficult to learn and master, but its syntax looks foreign to C# / C++ / Python developers.&lt;/p&gt;
&lt;p&gt;Swift, on the other hand, has a more conventional design. You can read Swift code the same way you can read C# code, even if you are not a Swift or C# developer.&lt;/p&gt;
&lt;p&gt;Swift is a compiled language, although it looks like an scripting language. It is strongly typed, it is object-oriented with functional features. It does not have garbage collection. It uses ARC instead.&lt;/p&gt;
&lt;p&gt;You can call any Objective-C API from Swift (at least Apple&amp;rsquo;s APIs) , and Apple claims it is faster than Objective-C. Objective-C wasn&amp;rsquo;t the fastest language out there, but it wasn&amp;rsquo;t particularly slow either.&lt;/p&gt;
&lt;p&gt;Perhaps the &lt;strong&gt;killer feature&lt;/strong&gt; for me is Playground, a kind of sandbox for testing ideas / rapid development / rapid prototyping. BTW, Playground seems to be inspired (or copied if you prefer) from &lt;a href=&#34;http://vimeo.com/36579366&#34;&gt;Bret Victor&amp;rsquo;s Inventing on Principle talk&lt;/a&gt;, which is a MUST WATCH video for everybody.&lt;/p&gt;
&lt;p&gt;Also, Swift has pretty much what John Siracusa asked for in his &lt;a href=&#34;http://arstechnica.com/apple/news/2010/06/copland-2010-revisited.ars&#34;&gt;Copland 2010&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;So, if Swift is easier to learn, easier to master, less error-prone, faster to develop code, performs better than Objective-C and you can call Objective-C code from it, why Apple should keep adding features to Objective-C ?&lt;/p&gt;
&lt;p&gt;I expect that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objective-C code will be supported on iOS / OS X for the foreseeable future.&lt;/li&gt;
&lt;li&gt;But new APIs will be added on Swift only. Developers will be forced to migrate to Swift to use the new ones (similar to what happened years ago with Carbon vs. Cocoa APIs ).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unknowns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can you call any Objective-C library from it ? or only Apple&amp;rsquo;s APIs ? Will Apple release the binding generator ? &lt;strong&gt;[UPDATE]&lt;/strong&gt;: Yes, it is possible to call &lt;a href=&#34;http://ericasadun.com/2014/06/03/swift-combining-objc-and-swift-in-one-project/&#34;&gt;3rd party Obj-C libraries from Swift&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Will Apple open source the language ? Or at least submit the language to the standard committee ?&lt;/li&gt;
&lt;li&gt;Can you call C and/or C++ libraries from it ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift is a very attractive language, so if Apple decides to open source it, it has the potential to gain a lot of developers from other platforms as well. I would definitely use it, and would seriously analyze the possibility of porting cocos2d to it.&lt;/li&gt;
&lt;li&gt;Bret Victor&amp;rsquo;s Inventing on Principle was very inspiring. Since the day I watched that video, I wanted to add similar features to cocos2d. Playground showed us that it is possible to do it with a compiled language.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Integrating LiquidFun with Cocos2d-x: Part I</title>
      <link>http://localhost:1313/2014/04/23/integrating-liquidfun-with-cocos2d-x-part-i/</link>
      <pubDate>Wed, 23 Apr 2014 21:51:26 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/23/integrating-liquidfun-with-cocos2d-x-part-i/</guid>
      <description>&lt;p&gt;[caption id=&amp;quot;&amp;quot; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;400&amp;rdquo;]&lt;img alt=&#34;LiquidFun Testbed + Cocos2d-x&#34; loading=&#34;lazy&#34; src=&#34;https://camo.githubusercontent.com/024bc94a0b655472808a1073611f72bff59f3f50/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d64705a666f5a3776472d512f553153304746486d6879492f41414141414141413735492f574b6e764e7334597069382f733430302f494d475f303031322e6a7067&#34;&gt; LiquidFun Testbed + Cocos2d-x[/caption]&lt;/p&gt;
&lt;p&gt;From LiquidFun&amp;rsquo;s site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on &lt;a href=&#34;https://github.com/cocos2d/cocos2d-x-samples/blob/v3/box2d.org&#34;&gt;Box2d&lt;/a&gt;, &lt;a href=&#34;http://google.github.io/liquidfun/&#34;&gt;LiquidFun&lt;/a&gt; features particle-based fluid simulation. Game developers can use it for new game mechanics and add realistic physics to game play. Designers can use the library to create beautiful fluid interactive experiences.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically LiquidFun is Box2d plus an extension to simulate fluids using a particle system. To test it, download and install the official &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.wolff.liquidfun.testbed2&#34;&gt;LiquidFun - Testbed,&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.wolff.EyeCandy&#34;&gt;LiquidFun - EyeCandy&lt;/a&gt; for Android.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cocos2d-x.org&#34;&gt;Cocos2d-x&lt;/a&gt; already has Box2d integration, so in order to integrate Cocos2d-x with LiquidFun, we only need to integrate this new class: &lt;code&gt;b2ParticleSystem&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;liquidfuns-b2particlesystem&#34;&gt;LiquidFun&amp;rsquo;s b2ParticleSystem&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m not going to describe how to use LiquidFun (for that, read &lt;a href=&#34;http://google.github.io/liquidfun/Programmers-Guide/html/index.html&#34;&gt;its programmers guide&lt;/a&gt;). Instead, I&amp;rsquo;m going to describe how to integrate &lt;code&gt;b2ParticleSystem&lt;/code&gt; in Cocos2d-x (also applicable to any other game engine).&lt;/p&gt;
&lt;p&gt;For the integration, what we need is a Cocos2d-x node that knows how to render a &lt;code&gt;b2ParticleSystem&lt;/code&gt;. And &lt;a href=&#34;https://github.com/google/liquidfun/blob/v1.0.0/liquidfun/Box2D/Box2D/Particle/b2ParticleSystem.h#L189&#34;&gt;b2ParticleSystem&lt;/a&gt; has these 4 useful methods:&lt;/p&gt;
&lt;p&gt;[code language=&amp;ldquo;cpp&amp;rdquo;]
class b2ParticleSystem {
&amp;hellip;
// Get the number of particles.
int32 GetParticleCount() const;&lt;/p&gt;
&lt;p&gt;// Get the particle radius.
float32 GetRadius() const;&lt;/p&gt;
&lt;p&gt;// Get the position of each particle in Box2d&amp;rsquo;s coordinate system
// Array is length GetParticleCount()
b2Vec2* GetPositionBuffer();&lt;/p&gt;
&lt;p&gt;// Get the color of each particle in RGBA Uint8 format.
// Array is length GetParticleCount()
b2ParticleColor* GetColorBuffer();
};
[/code]&lt;/p&gt;
&lt;p&gt;Ideally we should be able to reuse &lt;code&gt;cocos2d::ParticleSystemQuad&lt;/code&gt; for the rendering, but we can&amp;rsquo;t because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cocos2d::ParticleSystemQuad&lt;/code&gt; doesn&amp;rsquo;t support changing the attractor (this is a design bug, we need to fix it). A &lt;em&gt;nil&lt;/em&gt; attractor would be needed for this case.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ParticleSystemQuad&lt;/code&gt; works with Quads, and not Points. And even if Points were supported (like in Cocos2d-x v1), it wouldn&amp;rsquo;t work because the points and colors should be in an interleaved array.&lt;/li&gt;
&lt;li&gt;The other issue is the conversion between Box2d and Cocos2d-x coordinate system, but it would be easy to fix.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Dell XPS 15: Quick Review</title>
      <link>http://localhost:1313/2014/04/15/dell-xps-15-quick-review/</link>
      <pubDate>Wed, 16 Apr 2014 00:01:49 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/15/dell-xps-15-quick-review/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using a &lt;a href=&#34;http://www.microsoftstore.com/store/msusa/en_US/pdp/Dell-XPS-15-15-8947sLV-Touchscreen-Laptop/productID.288730000&#34;&gt;Dell XPS 15&lt;/a&gt; for a week, and this is my review (from a developer&amp;rsquo;s point of view):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display: It has a nice 15&amp;quot; display with a resolution of 3200 x 1800 (higher DPI than the MacBook Retina Display).&lt;/li&gt;
&lt;li&gt;Weight: It is a light notebook, of about 2 kilos.&lt;/li&gt;
&lt;li&gt;It is very fast. And it boots in a just a few seconds.&lt;/li&gt;
&lt;li&gt;It doesn&amp;rsquo;t come with &lt;a href=&#34;http://www.microsoftstore.com/store/msusa/html/pbpage.MicrosoftSignature&#34;&gt;crapware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The keyboard is Ok. I like that you can toggle the Functions keys by pressing Fn + Esc.&lt;/li&gt;
&lt;li&gt;Great unboxing experience, but who cares?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vistual Studio: First steps</title>
      <link>http://localhost:1313/2014/04/10/vistual-studio-first-steps/</link>
      <pubDate>Fri, 11 Apr 2014 02:50:07 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/10/vistual-studio-first-steps/</guid>
      <description>&lt;h3 id=&#34;goals&#34;&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Compile and run cocos2d-x tests on the emulator&lt;/li&gt;
&lt;li&gt;Set a breakpoint in Visual Studio.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;running-cpp-test-on-the-emulator&#34;&gt;Running cpp-test on the Emulator&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Download &lt;a href=&#34;http://www.cocos2d-x.org/download&#34;&gt;cocos2d-x v3.0&lt;/a&gt; &lt;strong&gt;2.&lt;/strong&gt; Unzip it and then go to &lt;em&gt;cocos2d-x/build&lt;/em&gt; directory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd cocos2d-x/build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Open &lt;em&gt;cocos2d-wp8.vc2012.sln&lt;/em&gt; with Visual Studio&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ start cocos2d-wp8.vc2012.sln
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Set &lt;em&gt;cpp-tests (Windows Phone Silverlight 8)&lt;/em&gt; as the default project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the &lt;em&gt;Solution Explorer&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Right click on &lt;em&gt;cpp-tests (Windows Phone Silverlight 8)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;em&gt;Set as StartUp Project&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://retro.moe/wp-content/uploads/2014/04/vs_default_project.png&#34;&gt;&lt;img alt=&#34;vs_default_project&#34; loading=&#34;lazy&#34; src=&#34;http://retro.moe/wp-content/uploads/2014/04/vs_default_project.png?w=676&#34;&gt;&lt;/a&gt;&lt;strong&gt;5.&lt;/strong&gt; Run cpp-tests on the Emulator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press the &lt;em&gt;Emulator 8.1 WVGA 4 inch button&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;run-emulator&#34; loading=&#34;lazy&#34; src=&#34;http://retro.moe/wp-content/uploads/2014/04/run-emulator.png?w=529&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If an Hyper-V error appears, then you have to enable Hyper-V:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj863509%28v=vs.105%29.aspx&#34;&gt;Enable Hyper-V on the BIOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://windows.microsoft.com/en-us/windows-8/hyper-v-run-virtual-machines&#34;&gt;And then enable Hyper-V on Windows 8.1 Pro&lt;/a&gt; (it won&amp;rsquo;t work on the &amp;lsquo;Regular&amp;rsquo; edition).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; If the following Dialog pops-up, just press &lt;em&gt;Retry&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://retro.moe/wp-content/uploads/2014/04/hypervisor.png&#34;&gt;&lt;img alt=&#34;hypervisor&#34; loading=&#34;lazy&#34; src=&#34;http://retro.moe/wp-content/uploads/2014/04/hypervisor.png?w=676&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s all. You should see the cpp-tests running on the Emulator:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://retro.moe/wp-content/uploads/2014/04/cocos2d-emulator.png&#34;&gt;&lt;img alt=&#34;cocos2d-emulator&#34; loading=&#34;lazy&#34; src=&#34;http://retro.moe/wp-content/uploads/2014/04/cocos2d-emulator.png?w=676&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Installing git</title>
      <link>http://localhost:1313/2014/04/10/installing-git/</link>
      <pubDate>Thu, 10 Apr 2014 19:25:10 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/10/installing-git/</guid>
      <description>&lt;p&gt;So you have Windows 8.1 + Visual Studio 2013 installed. Now you need to install a git client.&lt;/p&gt;
&lt;p&gt;My workflow in Mac is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I use git command line about 70% of the time.&lt;/li&gt;
&lt;li&gt;In the reaming 30% I&amp;rsquo;m usingÂ &lt;a href=&#34;http://www.git-tower.com/&#34;&gt;Tower&lt;/a&gt;, &lt;a href=&#34;http://www.kaleidoscopeapp.com/&#34;&gt;Kaleidoscope&lt;/a&gt; and &lt;a href=&#34;http://www.raywenderlich.com/51351/how-to-use-git-source-control-with-xcode-in-ios-7&#34;&gt;Xcode&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I was looking for something similar for Windows. And so far, this is my current setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msysgit.github.io/&#34;&gt;Mysysgit&lt;/a&gt;, for git command line.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sourcetreeapp.com/&#34;&gt;SourceTree&lt;/a&gt; for GUI&lt;/li&gt;
&lt;li&gt;I couldn&amp;rsquo;t find a good stand-alone diff-viewer, so I&amp;rsquo;m using SourceTree&amp;rsquo;s&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I like about Mysysgit is that it installs a Unix-like shell, with &lt;a href=&#34;http://code-worrier.com/blog/autocomplete-git/&#34;&gt;git auto-completion&lt;/a&gt; and you can also see the &lt;a href=&#34;http://code-worrier.com/blog/git-branch-in-bash-prompt/&#34;&gt;current branch&lt;/a&gt; in the shell prompt. That is very handy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>From iPhone 4S to Lumia 1520</title>
      <link>http://localhost:1313/2014/04/08/from-iphone4s-to-lumia1520/</link>
      <pubDate>Wed, 09 Apr 2014 00:36:50 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/08/from-iphone4s-to-lumia1520/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://retro.moe/wp-content/uploads/2014/04/20140408-173635.jpg&#34;&gt;&lt;img alt=&#34;20140408-173635.jpg&#34; loading=&#34;lazy&#34; src=&#34;https://retro.moe/wp-content/uploads/2014/04/20140408-173635.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In order to have a better understanding of Windows Phone, I&amp;rsquo;m migrating from my old and tinyÂ  iPhone 4S (3.5&amp;quot; display) to the huge &lt;a href=&#34;http://www.nokia.com/us-en/phones/phone/lumia1520/&#34;&gt;Lumia 1520 (6&amp;quot; display),&lt;/a&gt;(Thanks MS for the gift).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also switching carriers, from Verizon to AT&amp;amp;T.&lt;/p&gt;
&lt;p&gt;My very first impression is that Windows Phone is different. I&amp;rsquo;m not saying it is worse or better than iOS,Â  it is just different. It is an smartphone , so it has Apps,Â  a Store,Â  Maps, Messages, and more&amp;hellip; but with a different interface. If you are coming from iOS or Android it might take a while to get used to it.&lt;/p&gt;
&lt;p&gt;As an example, the &amp;ldquo;Start&amp;rdquo; screen is the start screen ( &lt;em&gt;sic&lt;/em&gt;)&amp;hellip;Â  and it has &amp;quot; &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh202948%28v=vs.105%29.aspx&#34;&gt;live tiles&lt;/a&gt;&amp;quot;. A tile is like an bookmark (or symbolic link) to an app but &amp;ldquo;live&amp;rdquo;: it can change its &amp;ldquo;icon&amp;rdquo; in runtime. You can also change the size of the tiles, and re-order them.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://retro.moe/wp-content/uploads/2014/04/wp_ss_20140408_0001.jpg&#34;&gt;&lt;img alt=&#34;wp_ss_20140408_0001&#34; loading=&#34;lazy&#34; src=&#34;http://retro.moe/wp-content/uploads/2014/04/wp_ss_20140408_0001.jpg?w=576&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the &amp;ldquo;start&amp;rdquo; screen you can transition to the &amp;ldquo;apps&amp;rdquo; screen with a swipe to the left. It contains a alphabetically-sorted list ofall your installed apps&amp;hellip; as long as the apps are not games.Â  Games are stored in another container called &amp;ldquo;games&amp;rdquo; :)Â  So, you won&amp;rsquo;t find any games in the &amp;ldquo;apps&amp;rdquo; screen&amp;hellip; you can&amp;rsquo;t even search for installed games from the &amp;ldquo;apps&amp;rdquo; screen.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Comparing prices</title>
      <link>http://localhost:1313/2014/04/04/comparing-prices/</link>
      <pubDate>Fri, 04 Apr 2014 08:48:08 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/04/comparing-prices/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s compare some prices.&lt;/p&gt;
&lt;p&gt;iOS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&#34;&gt;Xcode is free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You have to &lt;a href=&#34;https://developer.apple.com/programs/ios/&#34;&gt;pay $99 per year&lt;/a&gt; in order to submit games to the AppStore.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://developer.android.com/sdk/index.html&#34;&gt;SDK and NDK&lt;/a&gt; are free&lt;/li&gt;
&lt;li&gt;There is a &lt;a href=&#34;https://support.google.com/googleplay/android-developer/answer/113468?hl=en&#34;&gt;$25 one-time-only fee&lt;/a&gt; in order to submit games to Google Play&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows Phone 8:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.windowsphone.com/en-us/downloadsdk&#34;&gt;VS Express 2013&lt;/a&gt; and Windows Phone 8 SDK are free. If you want something more complete, you can get VS Online Pro for &lt;a href=&#34;http://www.visualstudio.com/en-us/products/visual-studio-online-professional-vs#Fragment_PricingHeader&#34;&gt;$45 per month,&lt;/a&gt; or VS Pro (offline version) for &lt;a href=&#34;http://www.microsoftstore.com/store/msusa/en_US/pdp/Visual-Studio-Professional-2013/productID.284832200&#34;&gt;$499&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have to &lt;a href=&#34;https://dev.windowsphone.com/en-us/join&#34;&gt;pay $19 as an individual or $99 as a company&lt;/a&gt; per year in order to submit games to the Windows Store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Random thoughts:&lt;/p&gt;</description>
    </item>
    <item>
      <title>To MSDN or not to MSDN</title>
      <link>http://localhost:1313/2014/04/04/to-msdn-or-not-to-msdn/</link>
      <pubDate>Fri, 04 Apr 2014 08:47:45 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/04/to-msdn-or-not-to-msdn/</guid>
      <description>&lt;p&gt;A long time ago I was a Windows developer. I developed for user mode, kernel mode, win32 stuff, etc. And having a &lt;a href=&#34;http://msdn.microsoft.com/en-us/default.aspx&#34;&gt;MSDN subscription&lt;/a&gt; was aÂ &lt;em&gt;must-have&lt;/em&gt;. Not only because Visual Studio was included, but also because you were able to download &amp;ldquo;debug&amp;rdquo; builds of the whole Operating System; and also you had access to all the Microsoft products in different localizations.&lt;/p&gt;
&lt;p&gt;The MSDN subscription was expensive, but it wasÂ worth it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Visual Studio</title>
      <link>http://localhost:1313/2014/04/04/installing-visual-studio/</link>
      <pubDate>Fri, 04 Apr 2014 07:26:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/04/installing-visual-studio/</guid>
      <description>&lt;p&gt;So, by now you should have Windows 8.1 up and running.&lt;/p&gt;
&lt;p&gt;The next thing is to install the &lt;a href=&#34;https://dev.windowsphone.com/en-us/downloadsdk&#34;&gt;Windows Phone SDK.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few days ago I tried the Windows Phone 8.0 SDK (it comes with Visual Studio Express 2012) and it works OK.&lt;/p&gt;
&lt;p&gt;But &lt;a href=&#34;http://support.microsoft.com/kb/2927432/en-us&#34;&gt;VS 2013 Update 2 RC&lt;/a&gt; (announced 2 days ago) already comes with the Windows Phone SDK 8.1 (which also allows you to develop for WP 8). This is good, because you don&amp;rsquo;t need to have two versions of VS installed in your machine in order to develop for Windows and Windows Phone 8.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use Windows 8.1</title>
      <link>http://localhost:1313/2014/04/04/use-windows-8-1/</link>
      <pubDate>Fri, 04 Apr 2014 07:25:26 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/04/use-windows-8-1/</guid>
      <description>&lt;p&gt;You need Windows 8 in order to develop for Windows Phone 8. Windows 7 wonât work.&lt;/p&gt;
&lt;p&gt;But avoid Windows 8, &lt;a href=&#34;https://www.google.com/search?q=windows+8+confusing&#34;&gt;it is confusing&lt;/a&gt;. Use Windows 8.1 instead. And &lt;a href=&#34;http://www.pcworld.com/article/2043243/how-to-boot-to-desktop-mode-in-windows-8-1.html&#34;&gt;boot directly into the âDesktopâ&lt;/a&gt;. Avoid the annoying âStartâ thing.Â  Good news: the upgrade from 8 to 8.1 is &lt;a href=&#34;http://windows.microsoft.com/en-us/windows-8/update-from-windows-8-tutorial&#34;&gt;free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You shouldÂ  know that &lt;a href=&#34;http://www.microsoft.com/en-us/windows/enterprise/products-and-technologies/windows-8-1/compare/default.aspx&#34;&gt;there are many âflavorsâ of Windows&lt;/a&gt;: âRTâ, âRegularâ, âProâ, âEnterpriseââ¦ just get the âProâ.Â  &lt;em&gt;RT&lt;/em&gt; (Runtime) is the new name for &lt;em&gt;&lt;a href=&#34;http://www.theverge.com/2012/8/2/3216545/microsoft-metro-branding-memo-european-partner&#34;&gt;Metro&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>First tip</title>
      <link>http://localhost:1313/2014/04/04/first-tip/</link>
      <pubDate>Fri, 04 Apr 2014 07:05:44 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/04/first-tip/</guid>
      <description>&lt;p&gt;[caption id=&amp;quot;&amp;quot; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;361&amp;rdquo;]&lt;img alt=&#34;First tip&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/wp-content/uploads/2014/04/tumblr_n3ijgp32fb1txa55no1_1280.jpg&#34;&gt; My dual boot Linux/Win machine. Not powerful enough for serious Win Phone development.[/caption]&lt;/p&gt;
&lt;p&gt;Get a good, dedicated Windows machine. Not like this one. VMWare / Parallels is OKishâ¦ but I wouldnât recommend it.&lt;/p&gt;
&lt;p&gt;My current notebook has 2 big issues: Low performance and a low-quality trackpad. I remember when I switched from a Dell XPS 12&amp;quot; to a MacBook 13&amp;quot; around 2008. One thing that called my attention was the size of the MacBook&amp;rsquo;s trackpad: it was huge. And now it is the opposite: I find that most Windows notebooks have a crappyÂ  trackpad: too small and unresponsive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>First post</title>
      <link>http://localhost:1313/2014/04/04/first-post/</link>
      <pubDate>Fri, 04 Apr 2014 07:02:46 +0000</pubDate>
      <guid>http://localhost:1313/2014/04/04/first-post/</guid>
      <description>&lt;p&gt;My background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iâve been developing &lt;a href=&#34;http://www.cocos2d-x.org/&#34;&gt;game&lt;/a&gt; &lt;a href=&#34;http://www.cocos2d-iphone.org/&#34;&gt;engines&lt;/a&gt; &amp;amp; games for iOS for the past 6 years&lt;/li&gt;
&lt;li&gt;Two years ago I started developing for Android&lt;/li&gt;
&lt;li&gt;And this week I started developing for Windows Phone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;â¦and so my journey begins.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
